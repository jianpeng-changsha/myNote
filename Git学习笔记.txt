什么是版本控制：版本控制是一种记录一个或者是若干个文件内容变化，为了方便将来查阅特有版本修订情况的系统，为了解决修改项目名称的方式导致的文件被覆盖所以开发出了本地控制系统，用来记录文件的历次更新差异；
RCS的原理：在硬盘上保存补丁集（补丁指的是文件修订前后的变化，通过所有的补丁可以重新计算各个版本的文件内容）
集中化的版本控制系统：目的是让不同系统上的开发者协同工作，这种系统有一个普遍的特征就是都有一个单一的集中管理的服务器，保存所有文件的修订版。而协同工作的人们通过客户端连接到服务器，取出最新的文件或者提交更新；优点是项目对所有开发者透明，项目管理者也可以方便掌握每一个开发者的权限，缺点是：中央服务器宕机将会导致所有开发者或者是管理者都没有办法对项目进行操作；
分布式版本控制系统：核心思想每一个客户端不直接搞服务器上的代码，而是镜像一份进行操作；
Git是什么？不同于其他的版本控制系统，其他系统往往是基于差异的版本控制，Git是吧数据看做是小型文件系统的一系列快照流，每当更新或者是保存项目时，Git会对当时的全部文件创建一个快照并且保存对这个快照的索引；
Git可以保证数据的完整性：Git使用哈希值的情况很多，Git数据库中保存的信息都是文件内容的哈希值来索引，而不是文件名；Git一般只添加文件，
Git有三种状态：已提交（数据安全的保存在本地数据库中），已修改（表示修改了文件，但是没有保存在数据库中）和已缓存（表示对一个已经修改的文件的当前版本做了标记，使之包含在下次提交的快照中）；
Git中的名词：仓库--repository；开始和停止跟踪--track；暂存--stage；提交---commit；向仓库推送文件---push；从远程仓库拉取文件---pull；
Git进行初始化操作：首先创建一个要镜像的文件夹，然后再Gitshell端跳转到该文件夹，之后使用Git init创建Git子目录；如果是在已存在文件的文件夹中进行版本空只，应该开始追踪这些文件并进行初始提交：可以通过Git add来指定所需的文件来进行追踪（git add 命令使用文件或者目录的路径作为参数；如果参数是目录的路径，该命令递归地跟踪目录下的所有文件），然后执行git commit:
Git支持多种传输协议。比如https://协议，ssh协议等等
工作目录中的每一个文件都不外乎有两种状态：已跟踪或者是未跟踪，已跟踪的文件是指被纳入了版本控制的文件，在上一次快照中有记录，在工作一段时间后状态可能是未修改，已修改或者是已放入缓存区。未跟踪的文件即不存在上次快照的记录中，也没有被放入暂存区，初次克隆仓库的时候，工作目录中的文件都属于已跟踪的文件并处于未修改的状态。
假设文件已经暂存，但是进行修改文件会同时出现在暂存区和非暂存区：原因：Git只是暂存了运行git add的版本，如果此时提交，显示的版本时最后一次运行gitadd命令的版本，所以git add之后又修订的文件，需要git add把最新的文件暂存起来；
习惯：一开始就为新仓库设置好gitignore文件的习惯，以免将来误提交了这类无用的文件；
.gitignore的格式规范如下：所有空行或者是以#开头的行都会被git忽略，可以使用标准的glob模式匹配，它会递归地应用在整个工作区.匹配模式可以以（/）开头防止递归，匹配模式可以以（/）结尾来指定目录；若要忽略指定模式以外的文件或者是目录，可以在模式前面加！取反
查看已经缓存的文件和未缓存的文件：要查看未缓存的文件更新了哪些部分，使用指令 git diff
面试题：git diff 、git diff --cached 、git diff HEAD三者之间的区别：git diff 查看working tree和index file的差别；git diff --cached用来查看index file 和commit的差别；git diff HEAD是用来查看working tree和commit之间的差别，head代表的是最近一次的commit信息；
其中 working tree 表示的是现在所在的目录，每当代码中进行了修改，working tree的状态就发生了改变，index file是索引文件，是连接working tree和commit之间的桥梁，每次使用git add命令来进行登记时，index file的内容就发生了改变，此时 indexfile就可以和working tree之间进行了同步；commit是最后的阶段，只有commit，代码才真正进入了仓库，使用git-commit就是将index file里的内容提交到commit中；
使用git commit 会启动文本编辑器来输入提交说明，
在commit命令后面加-m选项，会将提交的信息和命令放在同一行，可以看到是由哪个分支提交的，校验和是什么，以及在本次文件提交中，有多少文件修订过，多少航添加和删改过；
也可以使用gitcommit -a 选项自动把所有已经跟踪过的文件暂存在一起来提交
由于环境不够没办法在windows下进行的部分：
共享标签：使用git push origin 《tagname》将标签显式的送到共享服务器上，如果想要同时推送多个标签，可以使用代表--tags选项的git push命令，该命令会吧所有不在远程仓库服务器上的标签全部送到那里；删除远程标签的方式是git pushorgin--delete《tagname》

Git分支：
Git仓库中有五个对象：包括三个blob对象（用来保存文件快照），一个树对象（记录着目录结构和blob对象的索引）以及一个提交对象（记录着指向前面所述对戏那个的指针和所有的提交信息）
使用git commit进行提交操作时，git会先计算每一个子目录的校验和然后再Git仓库中这些校验和保存为树对象，然后，Git便会创建一个提交对象它除了上面的信息还会包含指向这个树对象的指针



常见的报错信息：
 LF will be replaced by CRLF in README.：Windows使用的是CRLF来标识一行的结束，而在Linux系统下只使用lf标识一行的结束，通常情况下，Git库不会自动修改文件的内容，但是默认会将入库的文件的行尾设置成lf会将检出的文件的行尾设置成CRLF
git add 时弹出的creat mode 100644:100代表的是普通文件，644代表文件权限






